2023/05/10 01:13:28 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.11 (main, Apr  5 2023, 14:15:10) [GCC 9.4.0]
    CUDA available: True
    numpy_random_seed: 32
    GPU 0: Tesla T4
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: x86_64-linux-gnu-gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 2.0.0+cu118
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.1+cu118
    OpenCV: 4.7.0
    MMEngine: 0.7.3

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 32
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/05/10 01:13:28 - mmengine - INFO - Config:
backbone_norm_cfg = dict(type='LN', eps=1e-06, requires_grad=True)
norm_cfg = dict(type='SyncBN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(512, 512))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(512, 512)),
    pretrained=None,
    backbone=dict(
        type='VisionTransformer',
        img_size=(512, 512),
        patch_size=16,
        in_channels=3,
        embed_dims=1024,
        num_layers=24,
        num_heads=16,
        out_indices=(5, 11, 17, 23),
        drop_rate=0.0,
        norm_cfg=dict(type='LN', eps=1e-06, requires_grad=True),
        with_cls_token=False,
        interpolate_mode='bilinear',
        init_cfg=dict(
            type='Pretrained',
            checkpoint=
            'https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-vitjx/jx_vit_large_p16_384-b3be5167.pth'
        )),
    neck=dict(
        type='MLANeck',
        in_channels=[1024, 1024, 1024, 1024],
        out_channels=256,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        act_cfg=dict(type='ReLU')),
    decode_head=dict(
        type='SETRMLAHead',
        in_channels=(256, 256, 256, 256),
        channels=512,
        in_index=(0, 1, 2, 3),
        dropout_ratio=0,
        mla_channels=128,
        num_classes=2,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=[
        dict(
            type='FCNHead',
            in_channels=256,
            channels=256,
            in_index=0,
            dropout_ratio=0,
            norm_cfg=dict(type='SyncBN', requires_grad=True),
            act_cfg=dict(type='ReLU'),
            num_convs=0,
            kernel_size=1,
            concat_input=False,
            num_classes=150,
            align_corners=False,
            loss_decode=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
        dict(
            type='FCNHead',
            in_channels=256,
            channels=256,
            in_index=1,
            dropout_ratio=0,
            norm_cfg=dict(type='SyncBN', requires_grad=True),
            act_cfg=dict(type='ReLU'),
            num_convs=0,
            kernel_size=1,
            concat_input=False,
            num_classes=150,
            align_corners=False,
            loss_decode=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
        dict(
            type='FCNHead',
            in_channels=256,
            channels=256,
            in_index=2,
            dropout_ratio=0,
            norm_cfg=dict(type='SyncBN', requires_grad=True),
            act_cfg=dict(type='ReLU'),
            num_convs=0,
            kernel_size=1,
            concat_input=False,
            num_classes=150,
            align_corners=False,
            loss_decode=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
        dict(
            type='FCNHead',
            in_channels=256,
            channels=256,
            in_index=3,
            dropout_ratio=0,
            norm_cfg=dict(type='SyncBN', requires_grad=True),
            act_cfg=dict(type='ReLU'),
            num_convs=0,
            kernel_size=1,
            concat_input=False,
            num_classes=150,
            align_corners=False,
            loss_decode=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4))
    ],
    train_cfg=dict(),
    test_cfg=dict(mode='slide', crop_size=(512, 512), stride=(341, 341)))
dataset_type = 'ISICTask1DatasetX'
data_root = '/content/dataset'
crop_size = (512, 512)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=2,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='ISICTask1DatasetX',
        data_root='/content/dataset',
        data_prefix=dict(
            img_path='img_dir/ISIC2018_Task1-2_Training_Input',
            seg_map_path='ann_dir/ISIC2018_Task1_Training_GroundTruth'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackSegInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='ISICTask1DatasetX',
        data_root='/content/dataset',
        data_prefix=dict(
            img_path='img_dir/ISIC2018_Task1-2_Test_Input',
            seg_map_path='ann_dir/ISIC2018_Task1_Test_GroundTruth'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='ISICTask1DatasetX',
        data_root='/content/dataset',
        data_prefix=dict(
            img_path='img_dir/ISIC2018_Task1-2_Test_Input',
            seg_map_path='ann_dir/ISIC2018_Task1_Test_GroundTruth'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = 'https://download.openmmlab.com/mmsegmentation/v0.5/setr/setr_mla_512x512_160k_b8_ade20k/setr_mla_512x512_160k_b8_ade20k_20210619_191118-c6d21df0.pth'
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0),
    clip_grad=None,
    paramwise_cfg=dict(custom_keys=dict(head=dict(lr_mult=10.0))))
param_scheduler = [
    dict(type='LinearLR', by_epoch=False, start_factor=0.1, begin=0, end=50),
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=150,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=50, val_interval=50)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=16000),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
work_dir = './work_dirs/tutorial'
randomness = dict(seed=32)

2023/05/10 01:13:38 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/05/10 01:13:38 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.conv_seg.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.conv_seg.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.conv_seg.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.conv_seg.bias:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.conv_seg.bias:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.conv_seg.bias:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.conv.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.conv.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.conv.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.bn.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.bn.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.bn.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.bn.bias:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.bn.bias:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.0.bn.bias:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.1.conv.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.1.conv.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.1.conv.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.1.bn.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.1.bn.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.1.bn.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.1.bn.bias:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.1.bn.bias:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.0.1.bn.bias:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.conv.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.conv.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.conv.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.bn.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.bn.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.bn.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.bn.bias:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.bn.bias:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.0.bn.bias:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.1.conv.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.1.conv.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.1.conv.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.1.bn.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.1.bn.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.1.bn.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.1.bn.bias:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.1.bn.bias:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.1.1.bn.bias:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.conv.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.conv.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.conv.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.bn.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.bn.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.bn.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.bn.bias:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.bn.bias:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.0.bn.bias:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.1.conv.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.1.conv.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.1.conv.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.1.bn.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.1.bn.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.1.bn.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.1.bn.bias:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.1.bn.bias:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.2.1.bn.bias:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.conv.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.conv.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.conv.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.bn.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.bn.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.bn.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.bn.bias:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.bn.bias:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.0.bn.bias:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.1.conv.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.1.conv.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.1.conv.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.1.bn.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.1.bn.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.1.bn.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.1.bn.bias:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.1.bn.bias:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- decode_head.up_convs.3.1.bn.bias:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.0.conv_seg.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.0.conv_seg.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.0.conv_seg.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.0.conv_seg.bias:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.0.conv_seg.bias:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.0.conv_seg.bias:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.1.conv_seg.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.1.conv_seg.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.1.conv_seg.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.1.conv_seg.bias:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.1.conv_seg.bias:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.1.conv_seg.bias:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.2.conv_seg.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.2.conv_seg.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.2.conv_seg.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.2.conv_seg.bias:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.2.conv_seg.bias:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.2.conv_seg.bias:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.3.conv_seg.weight:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.3.conv_seg.weight:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.3.conv_seg.weight:lr_mult=10.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.3.conv_seg.bias:lr=0.01
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.3.conv_seg.bias:weight_decay=0.0
2023/05/10 01:13:40 - mmengine - INFO - paramwise_options -- auxiliary_head.3.conv_seg.bias:lr_mult=10.0
2023/05/10 01:13:41 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Name of parameter - Initialization information

backbone.cls_token - torch.Size([1, 1, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.pos_embed - torch.Size([1, 1025, 1024]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.patch_embed.projection.weight - torch.Size([1024, 3, 16, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.patch_embed.projection.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.0.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.1.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.2.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.3.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.4.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.5.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.6.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.7.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.8.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.9.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.10.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.11.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.12.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.13.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.14.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.15.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.16.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.17.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.18.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.19.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.20.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.21.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.22.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.ln1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.ln1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.attn.attn.in_proj_weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.attn.attn.in_proj_bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.attn.attn.out_proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.attn.attn.out_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.ln2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.ln2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layers.23.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.norm.0.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.norm.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.norm.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.norm.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.norm.2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.norm.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.norm.3.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.norm.3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.channel_proj.0.conv.weight - torch.Size([256, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.channel_proj.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.channel_proj.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.channel_proj.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.channel_proj.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.channel_proj.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.channel_proj.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.channel_proj.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.channel_proj.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.channel_proj.3.conv.weight - torch.Size([256, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.channel_proj.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.channel_proj.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.feat_extract.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.feat_extract.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.feat_extract.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.feat_extract.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.feat_extract.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.feat_extract.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.feat_extract.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.feat_extract.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.feat_extract.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.feat_extract.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.feat_extract.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

neck.mla.feat_extract.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_seg.weight - torch.Size([2, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.up_convs.0.0.conv.weight - torch.Size([128, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.0.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.0.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.0.1.conv.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.0.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.0.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.1.0.conv.weight - torch.Size([128, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.1.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.1.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.1.1.conv.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.1.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.1.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.2.0.conv.weight - torch.Size([128, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.2.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.2.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.2.1.conv.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.2.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.2.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.3.0.conv.weight - torch.Size([128, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.3.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.3.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.3.1.conv.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.3.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up_convs.3.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.conv_seg.weight - torch.Size([150, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.conv_seg.bias - torch.Size([150]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.conv_seg.weight - torch.Size([150, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.conv_seg.bias - torch.Size([150]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.2.conv_seg.weight - torch.Size([150, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.2.conv_seg.bias - torch.Size([150]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.3.conv_seg.weight - torch.Size([150, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.3.conv_seg.bias - torch.Size([150]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/05/10 01:14:34 - mmengine - INFO - Load checkpoint from https://download.openmmlab.com/mmsegmentation/v0.5/setr/setr_mla_512x512_160k_b8_ade20k/setr_mla_512x512_160k_b8_ade20k_20210619_191118-c6d21df0.pth
2023/05/10 01:14:34 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/05/10 01:14:34 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/05/10 01:14:34 - mmengine - INFO - Checkpoints will be saved to /content/mmsegmentation/work_dirs/tutorial.
2023/05/10 01:16:16 - mmengine - INFO - Iter(train) [50/50]  lr: 7.6400e-04  eta: 0:00:00  time: 1.8812  data_time: 0.0117  memory: 10931  loss: 0.0764  decode.loss_ce: 0.0001  decode.acc_seg: 100.0000  aux_0.loss_ce: 0.0148  aux_0.acc_seg: 100.0000  aux_1.loss_ce: 0.0265  aux_1.acc_seg: 99.9556  aux_2.loss_ce: 0.0178  aux_2.acc_seg: 100.0000  aux_3.loss_ce: 0.0173  aux_3.acc_seg: 99.9169
2023/05/10 01:16:16 - mmengine - INFO - Saving checkpoint at 50 iterations
2023/05/10 01:36:39 - mmengine - INFO - Iter(val) [  50/1000]    eta: 6:22:30  time: 67.2279  data_time: 0.0737  memory: 4785  
2023/05/10 02:32:47 - mmengine - INFO - Iter(val) [ 100/1000]    eta: 11:26:25  time: 67.0877  data_time: 0.0759  memory: 3967  
2023/05/10 03:02:32 - mmengine - INFO - Iter(val) [ 150/1000]    eta: 10:00:45  time: 0.5032  data_time: 0.0034  memory: 4611  
2023/05/10 03:02:57 - mmengine - INFO - Iter(val) [ 200/1000]    eta: 7:05:44  time: 0.5051  data_time: 0.0037  memory: 2558  
2023/05/10 03:03:23 - mmengine - INFO - Iter(val) [ 250/1000]    eta: 5:20:34  time: 0.5071  data_time: 0.0043  memory: 2558  
2023/05/10 03:03:48 - mmengine - INFO - Iter(val) [ 300/1000]    eta: 4:10:19  time: 0.5053  data_time: 0.0028  memory: 2562  
2023/05/10 03:04:13 - mmengine - INFO - Iter(val) [ 350/1000]    eta: 3:20:00  time: 0.5052  data_time: 0.0029  memory: 2558  
2023/05/10 03:04:38 - mmengine - INFO - Iter(val) [ 400/1000]    eta: 2:42:10  time: 0.5030  data_time: 0.0034  memory: 2558  
2023/05/10 03:08:40 - mmengine - INFO - Iter(val) [ 450/1000]    eta: 2:17:04  time: 11.3205  data_time: 0.0155  memory: 2798  
2023/05/10 03:20:41 - mmengine - INFO - Iter(val) [ 500/1000]    eta: 2:04:09  time: 14.9980  data_time: 0.0196  memory: 2813  
2023/05/10 03:33:14 - mmengine - INFO - Iter(val) [ 550/1000]    eta: 1:51:51  time: 16.3520  data_time: 0.0247  memory: 2809  
2023/05/10 03:46:23 - mmengine - INFO - Iter(val) [ 600/1000]    eta: 1:39:54  time: 15.1976  data_time: 0.0266  memory: 2813  
2023/05/10 03:57:51 - mmengine - INFO - Iter(val) [ 650/1000]    eta: 1:26:52  time: 12.3311  data_time: 0.0224  memory: 2866  
2023/05/10 04:14:41 - mmengine - INFO - Iter(val) [ 700/1000]    eta: 1:16:21  time: 20.1295  data_time: 0.0284  memory: 2922  
2023/05/10 04:27:14 - mmengine - INFO - Iter(val) [ 750/1000]    eta: 1:03:34  time: 15.5206  data_time: 0.0195  memory: 3277  
2023/05/10 04:40:12 - mmengine - INFO - Iter(val) [ 800/1000]    eta: 0:50:55  time: 15.9403  data_time: 0.0223  memory: 2809  
2023/05/10 04:53:30 - mmengine - INFO - Iter(val) [ 850/1000]    eta: 0:38:17  time: 16.3844  data_time: 0.0157  memory: 2798  
2023/05/10 05:07:04 - mmengine - INFO - Iter(val) [ 900/1000]    eta: 0:25:36  time: 16.3451  data_time: 0.0191  memory: 2798  
2023/05/10 05:19:09 - mmengine - INFO - Iter(val) [ 950/1000]    eta: 0:12:46  time: 11.9181  data_time: 0.0156  memory: 2805  
2023/05/10 05:28:36 - mmengine - INFO - Iter(val) [1000/1000]    eta: 0:00:00  time: 11.1431  data_time: 0.0146  memory: 2798  
2023/05/10 05:28:36 - mmengine - INFO - per class results:
2023/05/10 05:28:36 - mmengine - INFO - 
+---------+-------+-------+
|  Class  |  IoU  |  Acc  |
+---------+-------+-------+
| outside | 100.0 | 100.0 |
|  inside |  nan  |  nan  |
+---------+-------+-------+
2023/05/10 05:28:36 - mmengine - INFO - Iter(val) [1000/1000]    aAcc: 100.0000  mIoU: 100.0000  mAcc: 100.0000  data_time: 0.0210  time: 15.1245
